
Const PORT_MAIN = 1
Const PORT_VENTILATION  = 2
Const PORT_LAMP = 3
Const PORT_LOW_VOLT  = 5
Const PORT_MID_VOLT  = 6
Const PORT_HIGH_VOLT  = 7
Const PORT_VOLT  = 8
Const PORT_CTRL_ENABLE = 9

Const PID_FREQ_SEC = 10
Const N_SENSORS_CAMERA = 4
Const kp = 1.0
Const ki = 3.0
Const kd = 500.0  ' penalizes high rate of change

Const MULT = 1.0
Const OFFSET = 0.0
Const F_N1 = 50
Const SECONDS = Sec

'--- Error bounds for different Power levels ---
Const LOW_VOLT_LIMIT = 1
Const MID_VOLT_LIMIT = 3
Const HIGH_VOLT_LIMIT = 40

Const LOWEST_CTRL_BOUND = 0.0
Const HIGHEST_CTRL_BOUND = 50.0  ' the bound aim to make plotting look good

Public PTemp, VoltBattery, T_floor, T_insulation
Public T_ceiling, T_out, T_camera
Public setPoint, signalErr, sumErr, dInput, inputSignal
Public signalErrKp, sumErrKi, dInputKd
Public ctrlSignal, prevInput,  Ventilation, Lamp, flag(9)

Function CheckIfValInBounds(signal, low, high)
    If signal >= low AND signal < high Then
        Return True
    Else
        Return False
    EndIf
EndFunction
    
Function Clip(signal, low, high)
    If signal > high Then Return high
    If signal < low Then Return low
    Return signal
EndFunction

Function SetPortVolt()
    If flag(PORT_LOW_VOLT) OR flag(PORT_MID_VOLT) OR flag(PORT_HIGH_VOLT) Then
        flag(PORT_VOLT) = True
        PortSet (PORT_VOLT, 1)
    Else
        flag(PORT_VOLT) = False
        PortSet (PORT_VOLT, 0)
    EndIf
EndFunction

Sub SetMainPort(condition)
    If condition <> 0 Then
        If flag(PORT_MAIN) = False Then
            PortSet (PORT_MAIN, 1)
            flag(PORT_MAIN) = True
            PortSet (PORT_CTRL_ENABLE,1)
            flag(PORT_CTRL_ENABLE) = True
        EndIf
    Else
        PortSet (PORT_MAIN, 0)
        flag(PORT_MAIN) = False
        PortSet (PORT_CTRL_ENABLE,0)
        flag(PORT_CTRL_ENABLE) = False
    EndIf
EndSub

DataTable (recordData,1,6000)  ' Is 6000 enough??
    DataInterval (0,30,SECONDS,10)
    Average (1,T_floor,FP2,False)
    Average (1,T_insulation,FP2,False)
    Average (1,T_camera,   FP2,False)
    Average (1,ctrlSignal, FP2,False)
    Average (1,dInputKd, FP2,False)
    Average (1,sumErrKi, FP2,False)
    Average (1,signalErrKp, FP2,False)
    Average (1,dInput, FP2,False)
    Average (1,sumErr, FP2,False)
    Average (1,signalErr, FP2,False)
    Sample  (1,setPoint,   FP2)
EndTable

DataTable (inputAvg,1,PID_FREQ_SEC)
    DataInterval (0,PID_FREQ_SEC,SECONDS,PID_FREQ_SEC)  ' ring buffer of length PID_FREQ_SEC
    Average(1,T_floor,FP2,False)
    Average(1,signalErr,FP2,False)
EndTable

SequentialMode
BeginProg
    Scan (1,SECONDS,3,0)  ' endless loop every 1 sec
    Battery (VoltBattery)  ' battery temp of CR1000
    PanelTemp (PTemp, F_N1) ' inner temp of CR1000
    
    '--- T-thermocapel uses inner CR temp for ref ---
    TCDiff (T_floor, 1,AutorangeC,1,TypeT,PTemp,True,0,F_N1,MULT,OFFSET)  ' Is this the correct way to use a buffer?
    TCDiff (T_insulation,  1,AutorangeC,2,TypeT,PTemp,True,0,F_N1,MULT,OFFSET)
    TCDiff (T_camera,1,AutorangeC,3,TypeT,PTemp,True,0,F_N1,MULT,OFFSET)
    
    '--- Guards against over-heating ---
    If T_floor<100.0 Then
        SetMainPort(setPoint)
    Else
        SetMainPort(0)
    EndIf
    
    '---  Calculate error in regards to T_floor ---
    inputSignal = inputAvg.T_floor_Avg
    
    '--- p ---
    signalErr = setPoint - inputSignal
    signalErrKp = signalErr * kp
    signalErrKp = Clip(signalErrKp, 0, 100.0)  ' when negative, only prevents the heating element
    '--- i ---
    sumErr = PID_FREQ_SEC * inputAvg.signalErr_Avg
    sumErrKi = sumErr * ki
    
    '--- d ---
    If TimeIntoInterval(0, PID_FREQ_SEC, SECONDS) Then
        dInput = prevInput - inputAvg.T_floor_Avg
        dInputKd = dInput * kd
        prevInput = inputAvg.T_floor_Avg ' only update prevInput once every PID_FREQ iterations
    EndIf
    
    '--- PID control signal ---
    ctrlSignal = signalErrKp
    ctrlSignal += sumErrKi
    ctrlSignal += dInputKd
    
    '--- Clip ctrlSignal ---
    ctrlSignal = Clip(ctrlSignal, LOWEST_CTRL_BOUND, HIGHEST_CTRL_BOUND)
    
    '--- control  ---
    PortsConfig (&B00111111,&B00111111)
    
    flag(PORT_LOW_VOLT) =	CheckIfValInBounds(ctrlSignal, LOW_VOLT_LIMIT, MID_VOLT_LIMIT)
    If flag(PORT_LOW_VOLT) Then
        PortSet (PORT_LOW_VOLT, 1)
    Else
        PortSet (PORT_LOW_VOLT, 0)
    EndIf
    
    flag(PORT_MID_VOLT) =	CheckIfValInBounds(ctrlSignal, MID_VOLT_LIMIT, HIGH_VOLT_LIMIT)
    If flag(PORT_MID_VOLT) Then
        PortSet (PORT_MID_VOLT, 1)
    Else
        PortSet (PORT_MID_VOLT, 0)
    EndIf
    
    flag(PORT_HIGH_VOLT) =	CheckIfValInBounds(ctrlSignal, HIGH_VOLT_LIMIT, HIGHEST_CTRL_BOUND+1)
    If flag(PORT_HIGH_VOLT) Then
        PortSet (PORT_HIGH_VOLT, 1)
    Else
        PortSet (PORT_HIGH_VOLT, 0)
    EndIf
    
    SetPortVolt()
    
    If flag(PORT_VENTILATION) Then
        PortSet (PORT_VENTILATION, 1)
        Ventilation=1
    Else
        PortSet (PORT_VENTILATION, 0)
        Ventilation=0
    EndIf
    
    If flag(PORT_LAMP) Then
        PortSet (PORT_LAMP, 1)
        Lamp=1
    Else
        PortSet (PORT_LAMP, 0)
        Lamp=0
    EndIf
    
    CallTable(recordData)
    CallTable(inputAvg)
    NextScan
    EndSequence
EndProg
